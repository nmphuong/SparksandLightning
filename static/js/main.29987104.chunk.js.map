{"version":3,"sources":["components/SuspenseWithChunkError/index.tsx","App.tsx","state/index.ts","reportWebVitals.ts","theme/color.tsx","theme/index.tsx","i18n.tsx","index.tsx"],"names":["SuspenseWithChunkError","props","state","hasError","error","isJsChunkLoadError","name","isCssChunkLoadError","code","isChunkLoadError","isRecoveringFromChunkError","window","history","nextState","replaceState","location","reload","this","fallback","React","Component","Home","lazy","App","exact","path","component","to","store","configureStore","reducer","preloadedState","load","states","disableWarnings","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","color","White","Silver","Gray","Black","Red","Maroon","Yellow","Olive","Lime","Green","Aqua","Teal","Blue","Navy","Fuchsia","Purple","Z_INDEX","theme","text1","text2","background1","borderButton1","button1","button2","ThemeProvider","children","themeObject","useMemo","i18nInit","fallbackLng","lng","debug","whitelist","interpolation","escapeValue","i18n","use","Backend","LanguageDetector","initReactI18next","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29987104.chunk.js","sourcesContent":["import React, { Suspense, SuspenseProps } from 'react'\n\ninterface State {\n  hasError: boolean\n}\n\nclass SuspenseWithChunkError extends React.Component<SuspenseProps, State> {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true }\n  }\n\n  componentDidCatch(error) {\n    const isJsChunkLoadError = error.name === 'ChunkLoadError'\n    const isCssChunkLoadError = error.code === 'CSS_CHUNK_LOAD_FAILED'\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError\n\n    // Save a flag on the window object indicating that we have already had a chunk error.\n    // This prevents infinite reloads\n    const isRecoveringFromChunkError = !!window.history.state?.isRecoveringFromChunkError\n\n    // If was a chunk load error, refresh the page\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\n      const nextState = { ...window.history.state, isRecoveringFromChunkError: true }\n      window.history.replaceState(nextState, '')\n      window.location.reload()\n      return\n    }\n\n    throw error\n  }\n\n  render() {\n    const { hasError } = this.state\n    const { fallback } = this.props\n\n    if (hasError) {\n      return fallback\n    }\n\n    return <Suspense {...this.props} />\n  }\n}\n\nexport default SuspenseWithChunkError\n","import React, { lazy } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\"\nimport SuspenseWithChunkError from './components/SuspenseWithChunkError'\n\nimport './styled.css'\n\nconst Home = lazy(() => import(\"./views/Home\"));\n\nfunction App() {\n  return (\n    <>\n      <SuspenseWithChunkError fallback={\"123\"}>\n        <Switch>\n          <Route exact path=\"/home\" component={Home} />\n          <Route path=\"*\">\n            <Redirect to=\"/home\" />\n          </Route>\n        </Switch>\n      </SuspenseWithChunkError>\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { load } from 'redux-localstorage-simple'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists']\n\nconst store = configureStore({\n  reducer: {\n    //\n  },\n  preloadedState: load({ states: PERSISTED_KEYS, disableWarnings: process.env.NODE_ENV === 'test' }),\n})\n\nexport default store\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export class color {\n    static readonly White       =   '#FFFFFF'\n    static readonly Silver      =   '#C0C0C0'\n    static readonly Gray        =   '#808080'\n    static readonly Black       =   '#000000'\n    static readonly Red         =   '#FF0000'\n    static readonly Maroon      =   '#800000'\n    static readonly Yellow      =   '#FFFF00'\n    static readonly Olive       =   '#808000'\n    static readonly Lime        =   '#00FF00'\n    static readonly Green       =   '#008000'\n    static readonly Aqua        =   '#00FFFF'\n    static readonly Teal        =   '#008080'\n    static readonly Blue        =   '#0000FF'\n    static readonly Navy        =   '#000080'\n    static readonly Fuchsia     =   '#FF00FF'\n    static readonly Purple      =   '#800080'\n}","import React, { useMemo } from 'react'\nimport {\n  DefaultTheme,\n  ThemeProvider as StyledComponentsThemeProvider,\n} from 'styled-components/macro'\n\nimport { Colors } from './styled'\nimport { color } from './color'\n\nexport const MEDIA_WIDTHS = {\n  upToExtraSmall: 500,\n  upToSmall: 720,\n  upToMedium: 960,\n  upToLarge: 1280,\n}\n\nexport enum Z_INDEX {\n  deprecated_zero = 0,\n  deprecated_content = 1,\n  dropdown = 1000,\n  sticky = 1020,\n  fixed = 1030,\n  modalBackdrop = 1040,\n  offcanvas = 1050,\n  modal = 1060,\n  popover = 1070,\n  tooltip = 1080,\n}\n\nfunction colors(): Colors {\n  return {\n    // text\n    text1: color.Black,\n    text2: color.White,\n    // background\n    background1: color.Silver,\n    // border button\n    borderButton1: color.Black,\n    // button background\n    button1: color.White,\n    button2: color.Blue\n  }\n}\n\nfunction theme(): DefaultTheme {\n  return {\n    ...colors()\n  }\n}\n\nexport default function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const themeObject = useMemo(() => theme(), [])\n\n  return <StyledComponentsThemeProvider theme={themeObject}>{children}</StyledComponentsThemeProvider>\n}\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\n\nimport Backend from 'i18next-http-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\nconst languageSupported = ['en', 'vi']\n\nconst i18nInit = {\n  fallbackLng: 'en',\n  lng: 'en',\n  debug: false,\n  whitelist: languageSupported,\n\n  interpolation: {\n    escapeValue: false\n  }\n}\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init(i18nInit)\n\n\nexport default i18n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport store from './state'\nimport reportWebVitals from './reportWebVitals'\nimport ThemeProvider from './theme'\nimport './i18n'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback=\"loading\">\n      <Provider store={store}>\n        <HashRouter>\n          <ThemeProvider>\n            <App />\n          </ThemeProvider>\n        </HashRouter>\n      </Provider>\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}